#
dataSources:
  ds_0: !!com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:8266/g170_mall?serverTimezone=UTC&useSSL=false
    username: g170_mall
    password: g170_mall@123
#  ds_1: !!com.zaxxer.hikari.HikariDataSource
#    driverClassName: com.mysql.jdbc.Driver
#    jdbcUrl: jdbc:mysql://127.0.0.1:8266/g170_mall?serverTimezone=UTC&useSSL=false
#    username: g170_mall
#    password: g170_mall@123
rules:
# 配置分配规则
  ## 按user_id 分库 按 order_id 分表 做 2库2表 这里简化做1个库
  - !SHARDING
    tables:
      # 配置 t_order表规则
      t_order:
        #  actualDataNodes: ds_${0..1}.t_order_${0..1}
        actualDataNodes: ds_0.t_order_${0..15}
        # 配置分库策略
        databaseStrategy:
          standard:
            shardingColumn: user_id
            shardingAlgorithmName: database_inline
        # 配置分表策略
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: table_inline
#        keyGenerateStrategy:
#          column: order_id
#          keyGeneratorName: snowflake
#      bindingTables:
#        - t_order ,t_order_item
    defaultDatabaseStrategy:
      standard:
        shardingColumn: user_id
        shardingAlgorithmName: database_inline
    defaultTableStrategy:
      none:
        # 能否给默认值

    # 配置分片算法
    shardingAlgorithms:
      database_inline:
        type: INLINE
        props:
          algorithm-expression: ds_0 #ds_${user_id % 2}
      table_inline:
        type: INLINE
        props:
          algorithm-expression: t_order_${user_id % 2}

    keyGenerators:
      snowflake:
        type: SNOWFLAKE
        props:
          worker-id: 123
