<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding"
       xmlns:shardingsphere="http://shardingsphere.apache.org/schema/shardingsphere/datasource"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://shardingsphere.apache.org/schema/shardingsphere/sharding
            http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd
            http://shardingsphere.apache.org/schema/shardingsphere/datasource
            http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd"
       xmlns:context="http://www.springframework.org/schema/context">
  <!-- 配置真实数据源 -->
  <!-- 配置第 1 个数据源 -->
  <bean id="ds0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="jdbcUrl" value="jdbc:mysql://localhost:8266/g170_mall_0" />
    <property name="username" value="g170_mall" />
    <property name="password" value="g170_mall@123" />
  </bean>
  <!-- 配置第 2 个数据源 -->
  <bean id="ds1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="jdbcUrl" value="jdbc:mysql://localhost:8266/g170_mall_1" />
    <property name="username" value="g170_mall" />
    <property name="password" value="g170_mall@123" />
  </bean>

  <!-- 配置分库策略 -->
  <sharding:sharding-algorithm id="dbShardingAlgorithm" type="INLINE">
    <props>
      <prop key="algorithm-expression">ds$->{user_id % 2}</prop>
    </props>
  </sharding:sharding-algorithm>
  <sharding:standard-strategy id="dbStrategy" sharding-column="user_id" algorithm-ref="dbShardingAlgorithm" />

  <!-- 配置分表策略 -->
  <sharding:sharding-algorithm id="tableShardingAlgorithm" type="INLINE">
    <props>
      <prop key="algorithm-expression">t_order$->{order_id % 2}</prop>
    </props>
  </sharding:sharding-algorithm>
  <sharding:standard-strategy id="tableStrategy" sharding-column="order_id" algorithm-ref="tableShardingAlgorithm" />

  <!-- 配置分布式id生成策略 -->
  <sharding:key-generate-algorithm id="snowflakeAlgorithm" type="SNOWFLAKE">
    <props>
      <prop key="worker-id">123</prop>
    </props>
  </sharding:key-generate-algorithm>
  <sharding:key-generate-strategy id="orderKeyGenerator" column="order_id" algorithm-ref="snowflakeAlgorithm" />

  <!-- 配置sharding策略 -->
  <sharding:rule id="shardingRule">
    <sharding:table-rules>
      <sharding:table-rule logic-table="t_order"
                           actual-data-nodes="ds${0..1}.t_order_${0..1}"
                           database-strategy-ref="dbStrategy"
                           table-strategy-ref="tableStrategy"
                           key-generate-strategy-ref="orderKeyGenerator" />
    </sharding:table-rules>
    <sharding:binding-table-rules>
      <sharding:binding-table-rule logic-tables="t_order"/>
    </sharding:binding-table-rules>
<!--    <sharding:broadcast-table-rules>
      <sharding:broadcast-table-rule table="t_address"/>
    </sharding:broadcast-table-rules>-->
  </sharding:rule>

  <!-- 配置ShardingSphereDataSource -->
  <shardingsphere:data-source id="shardingDataSource" data-source-names="ds0, ds1" rule-refs="shardingRule">
    <props>
      <prop key="sql-show">false</prop>
    </props>
  </shardingsphere:data-source>
</beans>
